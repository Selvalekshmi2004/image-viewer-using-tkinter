import os
import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk

class ImageViewer:
    def __init__(self, root):
        self.root = root
        self.root.title("Image Viewer")
        self.root.geometry("800x600")
        
        self.image_list = []
        self.image_index = 0
        
        self.label = tk.Label(self.root, text="No Image Selected", font=("Arial", 14))
        self.label.pack(pady=20)
        
        self.canvas = tk.Canvas(self.root)
        self.canvas.pack(expand=True, fill=tk.BOTH)
        
        self.btn_frame = tk.Frame(self.root)
        self.btn_frame.pack(pady=20)
        
        self.btn_prev = tk.Button(self.btn_frame, text="Previous", command=self.show_prev)
        self.btn_prev.grid(row=0, column=0, padx=10)
        
        self.btn_next = tk.Button(self.btn_frame, text="Next", command=self.show_next)
        self.btn_next.grid(row=0, column=1, padx=10)
        
        self.btn_load = tk.Button(self.btn_frame, text="Load Images", command=self.load_images)
        self.btn_load.grid(row=0, column=2, padx=10)
        
        self.btn_exit = tk.Button(self.btn_frame, text="Exit", command=self.root.quit)
        self.btn_exit.grid(row=0, column=3, padx=10)
        
    def load_images(self):
        folder_selected = filedialog.askdirectory()
        if not folder_selected:
            return
        
        self.image_list = [os.path.join(folder_selected, file) for file in os.listdir(folder_selected)
                           if file.lower().endswith(('png', 'jpg', 'jpeg', 'bmp'))]
        
        if not self.image_list:
            messagebox.showerror("Error", "No valid images found in the selected folder.")
            return
        
        self.image_index = 0
        self.show_image()
        
    def show_image(self):
        if not self.image_list:
            return
        
        image_path = self.image_list[self.image_index]
        image = Image.open(image_path)
        image.thumbnail((self.root.winfo_width() - 50, self.root.winfo_height() - 100))
        self.photo = ImageTk.PhotoImage(image)
        
        self.canvas.delete("all")
        self.canvas.create_image(self.root.winfo_width()//2, self.root.winfo_height()//2, anchor=tk.CENTER, image=self.photo)
        
        self.label.config(text=os.path.basename(image_path))
        
    def show_next(self):
        if self.image_list and self.image_index < len(self.image_list) - 1:
            self.image_index += 1
            self.show_image()
        
    def show_prev(self):
        if self.image_list and self.image_index > 0:
            self.image_index -= 1
            self.show_image()
        
if __name__ == "__main__":
    root = tk.Tk()
    app = ImageViewer(root)
    root.mainloop()
